#include "kmlclient.h"
#include "XPLMProcessing.h"
#include "XPLMPlugin.h"
#include "XPLMMenus.h"
#include "XPLMUtilities.h"


using namespace std;
PLUGIN_API float flightloopCallback(float inElapsedSinceLastCall, float inElapsedTimeSinceLastFlightLoop, int inCounter, void * inRefcon) {
    if (inRefcon)
        return ((KmlClient*)inRefcon)->flightloop(inElapsedSinceLastCall, inElapsedTimeSinceLastFlightLoop, inCounter, inRefcon);
    return 0;
}

KmlClient::KmlClient() :
    mCurrentLatitude(XPLMFindDataRef("sim/flightmodel/position/latitude")),
    mCurrentLongitude(XPLMFindDataRef("sim/flightmodel/position/longitude")),
    mCurrentAltitude(XPLMFindDataRef("sim/flightmodel/position/y_agl"))
{
    enabled = false;
}

KmlClient::~KmlClient() {
    disable();
}

void KmlClient::enable() {

    XPLMRegisterFlightLoopCallback(flightloopCallback, 4, this);

}

void KmlClient::disable() {

    if (enabled) {
        stop_recording();
    }
    XPLMUnregisterFlightLoopCallback(flightloopCallback, this);

}

void KmlClient::start_recording() {

    std::string str = std::string("Output/") + std::string(get_current_date_time()) + std::string(".kml");
    handle.open(str);

    handle << "<?xml version='1.0' encoding='utf-8'?>\n";
    handle << "<kml xmlns='http://www.opengis.net/kml/2.2' xmlns:gx='http://www.google.com/kml/ext/2.2'>\n";
    handle << "<Placemark>\n";
    handle << "\t<name>XP flight path</name>\n";
    handle << "\t<description>Generated by XP2KML</description>\n";
    handle << "\t<gx:Track>\n";
    handle << "\t\t<extrude>1</extrude>\n";
    handle << "\t\t<tessellate>1</tessellate>\n";
    handle << "\t\t<altitudeMode>relativeToGround</altitudeMode>\n";
    enabled = true;
}

void KmlClient::stop_recording() {

    enabled = false;

    handle << "\t</gx:Track>\n";
    handle << "</Placemark>\n";
    handle << "</kml>\n";
    handle.close();

}

float KmlClient::flightloop(float, float, int, void *) {

    if (enabled) {
        handle << "\t\t\t<gx:coord>" << XPLMGetDataf(mCurrentLongitude) << " " << XPLMGetDataf(mCurrentLatitude) << " " << XPLMGetDataf(mCurrentAltitude) << "</gx:coord>\n";
    }

    return 4;
}

const std::string KmlClient::get_current_date_time() {
    auto t = std::time(nullptr);
    auto tm = *std::localtime(&t);

    std::ostringstream oss;
    oss << std::put_time(&tm, "%Y%m%d_%H%M%S");
    auto str = oss.str();
    return str;
}
